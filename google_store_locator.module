<?php
/**
 * @file
 * Code for the Google Store Locator feature.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Config\Config;

function google_store_locator_default_settings(Config $config) {
  $settings = [
    'datapath' => \Drupal\Core\Url::fromUri($config->get('json_path'))->toString(),
    'dataCacheEnabled' => $config->get('data_cache_enabled'),
    'mapzoom' => intval($config->get('map_zoom')),
    'mapcluster' => intval($config->get('map_cluster')),
    'mapclusterzoom' => intval($config->get('map_cluster_zoom')),
    'mapclustergrid' => intval($config->get('map_cluster_grid')),
    'mapclusterimagepath' => Html::escape(
      $config->get('map_cluster_image_path')
    ),
    'map_style' => json_decode($config->get('map_style')),
    'viewportManage' => $config->get('viewport_manage'),
    'viewportMarkerLimit' => intval($config->get('viewport_marker_limit')),
    'maplong' => $config->get('map_long'),
    'maplat' => $config->get('map_lat'),
    'search_label' => $config->get('search_label'),
    'search_placeholder' => $config->get('search_placeholder'),
    'no_results' => $config->get('no_results'),
    'no_results_in_view' => $config->get('no_results_in_view'),
    'loc_search_zoom' => (int) $config->get('loc_search_zoom'),
    'link_target' => $config->get('link_target'),
  ];

  if (!empty($config->get('items_per_panel'))) {
    $settings['items_per_panel'] = $config->get('items_per_panel');
  }

  if (!empty($config->get('marker_path'))) {
    $settings['marker_url'] = file_create_url($config->get('marker_path'));
  }

  if (!empty($config->get('feature_list'))) {
    $settings['feature_list'] = $config->get('feature_list');
  }

  if (!empty($config->get('loc_aware'))) {
    $settings['loc_aware_zoom'] = (int) $config->get('loc_aware_zoom');
  }

  $marker_icon_fid = $config->get('marker_icon');
  if (!empty($marker_icon_fid)) {
    $marker_file = \Drupal\file\Entity\File::load($marker_icon_fid);
    $settings['marker_path'] = $marker_file->toUrl();
  }

  return $settings;
}


/**
 * Implements hook_theme().
 */
function google_store_locator_theme() {
  // Returns an associative array of theme hook information.
  return [
    // The outer array keys are the names of the theme functions, and the values
    // are arrays containing information about the hook.
    'google_store_locator' => [
      // Keys=names of the variables passed to the themable function,
      // value=default value of the variable if none is provided.
      'variables' => [
        'settings' => [
          'data_path' => NULL,
          'map_zoom' => NULL,
          'map_cluster' => NULL,
          'map_cluster_grid' => NULL,
          'map_cluster_zoom' => NULL,
          'map_cluster_image_path' => NULL,
          'map_style' => NULL,
          'viewport_manage' => NULL,
          'viewport_marker_limit' => NULL,
          'map_long' => NULL,
          'map_lat' => NULL,
          'items_per_panel' => NULL,
          'loc_search_zoom' => NULL,
          'loc_aware' => NULL,
          'loc_aware_zoom' => NULL,
          'search_label' => NULL,
          'search_placeholder' => NULL,
          'no_results' => NULL,
          'marker_path' => NULL,
          'feature_list' => NULL,
          'link_target' => NULL,
        ]
      ],
    ],
  ];
}

/**
 * Default implementation of the google_store_locator theme hook.
 *
 * Builds the renderable array that attaches all necessary js files to the head
 * section of the page and generates the map and panel elements.
 */
function template_preprocess_google_store_locator(&$variables) {
  $gslSettings = \Drupal\google_store_locator\Util::getGlobalSettings();
  // Expand settings with defaults.
  $settings = $variables['settings'] + \Drupal\google_store_locator\Util::getDefaultSettings($gslSettings);

  $library = 'google_store_locator/google_store_locator';
  // Switch to the location awareness library if enabled.
  if (!empty($gslSettings->get('loc_aware'))) {
    $library = 'google_store_locator/google_store_locator_loc_aware';
  }
  // Add the google maps library.
  $mapsLibrary = 'google_store_locator/libraries.googlemaps';
  if ($gslSettings->get('gsl_lang_aware')) {
    $mapsLibrary .= '-' . \Drupal::languageManager()->getCurrentLanguage()->getId();
  }
  $gsl_map_id = \Drupal\Component\Utility\Html::getUniqueId(
    'google-store-locator-map-container'
  );
  $variables['attributes'] += ['id' => $gsl_map_id, 'class' => 'google-store-locator-map-container'];
  $variables += [
    '#attached' => [
      'library' => [$mapsLibrary, $library],
      'drupalSettings' => [
        'gsl' => [
          $gsl_map_id => $settings,
          'proximity' => $gslSettings->get('proximity_enabled'),
          'metric' => $gslSettings->get('proximity_metric'),
          'display_search_marker' => $gslSettings->get(
            'gsl_display_search_marker'
          ),
          'max_zoom' => $gslSettings->get('gsl_max_zoom'),
        ],
      ],
    ],
    'gsl_panel' => [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => ['id' => $gsl_map_id . '-panel', 'class' => 'google-store-locator-panel'],
    ],
    'gsl_map' => [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => ['id' => $gsl_map_id . '-map', 'class' => 'google-store-locator-map'],
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 */
function google_store_locator_library_info_build() {
  $libraries = [];

  /** @var \Drupal\Core\Config\ConfigFactory $config */
  $config = \Drupal::service('config.factory');
  /** @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig $gslSettings */
  $gslSettings = $config->get('google_store_locator.settings');

  $libraries['libraries.googlemaps'] = [
    'js' => [
      '//maps.googleapis.com/maps/api/js?key=' . $gslSettings->get(
        'google_api_key'
      ) . '&libraries=places' => [
        'type' => 'external',
        'group' => JS_LIBRARY,
        'weight' => -100,
        'attributes' => [
          'defer' => TRUE,
          'async' => TRUE,
        ],
      ],
    ],
  ];
  // Register a library for each enabled language - can't think of any other way
  // to do this with the current libraries implementation.
  foreach (\Drupal::languageManager()->getLanguages() as $language) {
    $libraries['libraries.googlemaps-' . $language->getId()] = $libraries['libraries.googlemaps'];
    $js = key($libraries['libraries.googlemaps']['js']);
    $libraries['libraries.googlemaps-' . $language->getId()]['js'][$js . '&language=' . $language->getId()] = $libraries['libraries.googlemaps-' . $language->getId()]['js'][$js];
    unset($libraries['libraries.googlemaps-' . $language->getId()]['js'][$js]);
  }

  return $libraries;
}

/**
 * Submit callback for google_store_locator_admin_form.
 */
function google_store_locator_admin_form_submit($form, &$form_state) {
  if ($form['google_store_locator']['gsl_marker_icon']['#default_value'] != 0) {
    if ($form['google_store_locator']['gsl_marker_icon']['#default_value'] != $form_state['values']['gsl_marker_icon']) {
      $old_file = file_load(
        $form['google_store_locator']['gsl_marker_icon']['#default_value']
      );
      file_delete($old_file);
    }
  }
  if ($form_state['values']['gsl_marker_icon'] != 0) {
    // Load the file via file.fid.
    $file = file_load($form_state['values']['gsl_marker_icon']);
    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    file_save($file);
    file_usage_add(
      $file,
      'google_store_locator',
      'google_store_locator',
      $file->fid
    );
  }
  menu_rebuild();
}
